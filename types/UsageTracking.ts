/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface UsageTrackingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contentRegistry"
      | "contentUsageHistory"
      | "getContentUsageCount"
      | "getLicense"
      | "getUserLicenses"
      | "isLicenseValid"
      | "issueLicense"
      | "licenses"
      | "nextLicenseId"
      | "recordUsage"
      | "revokeLicense"
      | "userLicenses"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LicenseIssued" | "LicenseRevoked" | "UsageRecorded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "contentRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contentUsageHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContentUsageCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicense",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLicenses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLicenseValid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueLicense",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "licenses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextLicenseId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordUsage",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLicense",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userLicenses",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "contentRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contentUsageHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContentUsageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLicense", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserLicenses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLicenseValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "licenses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextLicenseId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLicenses",
    data: BytesLike
  ): Result;
}

export namespace LicenseIssuedEvent {
  export type InputTuple = [
    licenseId: BigNumberish,
    licensee: AddressLike,
    contentId: BigNumberish,
    licenseType: BigNumberish
  ];
  export type OutputTuple = [
    licenseId: bigint,
    licensee: string,
    contentId: bigint,
    licenseType: bigint
  ];
  export interface OutputObject {
    licenseId: bigint;
    licensee: string;
    contentId: bigint;
    licenseType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicenseRevokedEvent {
  export type InputTuple = [licenseId: BigNumberish];
  export type OutputTuple = [licenseId: bigint];
  export interface OutputObject {
    licenseId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsageRecordedEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    licenseId: BigNumberish,
    user: AddressLike
  ];
  export type OutputTuple = [
    contentId: bigint,
    licenseId: bigint,
    user: string
  ];
  export interface OutputObject {
    contentId: bigint;
    licenseId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UsageTracking extends BaseContract {
  connect(runner?: ContractRunner | null): UsageTracking;
  waitForDeployment(): Promise<this>;

  interface: UsageTrackingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contentRegistry: TypedContractMethod<[], [string], "view">;

  contentUsageHistory: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, string] & {
        contentId: bigint;
        user: string;
        timestamp: bigint;
        usageContext: string;
      }
    ],
    "view"
  >;

  getContentUsageCount: TypedContractMethod<
    [contentId: BigNumberish],
    [bigint],
    "view"
  >;

  getLicense: TypedContractMethod<
    [licenseId: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        licensee: string;
        contentId: bigint;
        licenseType: bigint;
        startTime: bigint;
        endTime: bigint;
        usageLimit: bigint;
        usageCount: bigint;
        isActive: boolean;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getUserLicenses: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  isLicenseValid: TypedContractMethod<
    [licenseId: BigNumberish],
    [boolean],
    "view"
  >;

  issueLicense: TypedContractMethod<
    [
      contentId: BigNumberish,
      licensee: AddressLike,
      licenseType: BigNumberish,
      duration: BigNumberish,
      usageLimit: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  licenses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        licensee: string;
        contentId: bigint;
        licenseType: bigint;
        startTime: bigint;
        endTime: bigint;
        usageLimit: bigint;
        usageCount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  nextLicenseId: TypedContractMethod<[], [bigint], "view">;

  recordUsage: TypedContractMethod<
    [licenseId: BigNumberish, usageContext: string],
    [void],
    "nonpayable"
  >;

  revokeLicense: TypedContractMethod<
    [licenseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  userLicenses: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contentRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contentUsageHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, string] & {
        contentId: bigint;
        user: string;
        timestamp: bigint;
        usageContext: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContentUsageCount"
  ): TypedContractMethod<[contentId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLicense"
  ): TypedContractMethod<
    [licenseId: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        licensee: string;
        contentId: bigint;
        licenseType: bigint;
        startTime: bigint;
        endTime: bigint;
        usageLimit: bigint;
        usageCount: bigint;
        isActive: boolean;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserLicenses"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isLicenseValid"
  ): TypedContractMethod<[licenseId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "issueLicense"
  ): TypedContractMethod<
    [
      contentId: BigNumberish,
      licensee: AddressLike,
      licenseType: BigNumberish,
      duration: BigNumberish,
      usageLimit: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "licenses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        licensee: string;
        contentId: bigint;
        licenseType: bigint;
        startTime: bigint;
        endTime: bigint;
        usageLimit: bigint;
        usageCount: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextLicenseId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordUsage"
  ): TypedContractMethod<
    [licenseId: BigNumberish, usageContext: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeLicense"
  ): TypedContractMethod<[licenseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userLicenses"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "LicenseIssued"
  ): TypedContractEvent<
    LicenseIssuedEvent.InputTuple,
    LicenseIssuedEvent.OutputTuple,
    LicenseIssuedEvent.OutputObject
  >;
  getEvent(
    key: "LicenseRevoked"
  ): TypedContractEvent<
    LicenseRevokedEvent.InputTuple,
    LicenseRevokedEvent.OutputTuple,
    LicenseRevokedEvent.OutputObject
  >;
  getEvent(
    key: "UsageRecorded"
  ): TypedContractEvent<
    UsageRecordedEvent.InputTuple,
    UsageRecordedEvent.OutputTuple,
    UsageRecordedEvent.OutputObject
  >;

  filters: {
    "LicenseIssued(uint256,address,uint256,uint8)": TypedContractEvent<
      LicenseIssuedEvent.InputTuple,
      LicenseIssuedEvent.OutputTuple,
      LicenseIssuedEvent.OutputObject
    >;
    LicenseIssued: TypedContractEvent<
      LicenseIssuedEvent.InputTuple,
      LicenseIssuedEvent.OutputTuple,
      LicenseIssuedEvent.OutputObject
    >;

    "LicenseRevoked(uint256)": TypedContractEvent<
      LicenseRevokedEvent.InputTuple,
      LicenseRevokedEvent.OutputTuple,
      LicenseRevokedEvent.OutputObject
    >;
    LicenseRevoked: TypedContractEvent<
      LicenseRevokedEvent.InputTuple,
      LicenseRevokedEvent.OutputTuple,
      LicenseRevokedEvent.OutputObject
    >;

    "UsageRecorded(uint256,uint256,address)": TypedContractEvent<
      UsageRecordedEvent.InputTuple,
      UsageRecordedEvent.OutputTuple,
      UsageRecordedEvent.OutputObject
    >;
    UsageRecorded: TypedContractEvent<
      UsageRecordedEvent.InputTuple,
      UsageRecordedEvent.OutputTuple,
      UsageRecordedEvent.OutputObject
    >;
  };
}
