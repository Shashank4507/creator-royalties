/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ContentRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contents"
      | "creatorContents"
      | "getContent"
      | "getCreatorContents"
      | "isContentCreator"
      | "nextContentId"
      | "registerContent"
      | "setContentStatus"
      | "updateContentURI"
      | "updateMetadataURI"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContentRegistered"
      | "ContentStatusChanged"
      | "ContentUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "contents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorContents",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorContents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isContentCreator",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextContentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerContent",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContentStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContentURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadataURI",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "contents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContentCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextContentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContentURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadataURI",
    data: BytesLike
  ): Result;
}

export namespace ContentRegisteredEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    creator: AddressLike,
    contentType: BigNumberish
  ];
  export type OutputTuple = [
    contentId: bigint,
    creator: string,
    contentType: bigint
  ];
  export interface OutputObject {
    contentId: bigint;
    creator: string;
    contentType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContentStatusChangedEvent {
  export type InputTuple = [contentId: BigNumberish, isActive: boolean];
  export type OutputTuple = [contentId: bigint, isActive: boolean];
  export interface OutputObject {
    contentId: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContentUpdatedEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    contentURI: string,
    metadataURI: string
  ];
  export type OutputTuple = [
    contentId: bigint,
    contentURI: string,
    metadataURI: string
  ];
  export interface OutputObject {
    contentId: bigint;
    contentURI: string;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ContentRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ContentRegistry;
  waitForDeployment(): Promise<this>;

  interface: ContentRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        creator: string;
        contentURI: string;
        metadataURI: string;
        timestamp: bigint;
        isActive: boolean;
        contentType: bigint;
      }
    ],
    "view"
  >;

  creatorContents: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getContent: TypedContractMethod<
    [contentId: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        creator: string;
        contentURI: string;
        metadataURI: string;
        timestamp: bigint;
        isActive: boolean;
        contentType: bigint;
      }
    ],
    "view"
  >;

  getCreatorContents: TypedContractMethod<
    [creator: AddressLike],
    [bigint[]],
    "view"
  >;

  isContentCreator: TypedContractMethod<
    [contentId: BigNumberish, creator: AddressLike],
    [boolean],
    "view"
  >;

  nextContentId: TypedContractMethod<[], [bigint], "view">;

  registerContent: TypedContractMethod<
    [contentURI: string, metadataURI: string, contentType: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setContentStatus: TypedContractMethod<
    [contentId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;

  updateContentURI: TypedContractMethod<
    [contentId: BigNumberish, newContentURI: string],
    [void],
    "nonpayable"
  >;

  updateMetadataURI: TypedContractMethod<
    [contentId: BigNumberish, newMetadataURI: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        creator: string;
        contentURI: string;
        metadataURI: string;
        timestamp: bigint;
        isActive: boolean;
        contentType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "creatorContents"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContent"
  ): TypedContractMethod<
    [contentId: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        creator: string;
        contentURI: string;
        metadataURI: string;
        timestamp: bigint;
        isActive: boolean;
        contentType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreatorContents"
  ): TypedContractMethod<[creator: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isContentCreator"
  ): TypedContractMethod<
    [contentId: BigNumberish, creator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextContentId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerContent"
  ): TypedContractMethod<
    [contentURI: string, metadataURI: string, contentType: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setContentStatus"
  ): TypedContractMethod<
    [contentId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateContentURI"
  ): TypedContractMethod<
    [contentId: BigNumberish, newContentURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMetadataURI"
  ): TypedContractMethod<
    [contentId: BigNumberish, newMetadataURI: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContentRegistered"
  ): TypedContractEvent<
    ContentRegisteredEvent.InputTuple,
    ContentRegisteredEvent.OutputTuple,
    ContentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ContentStatusChanged"
  ): TypedContractEvent<
    ContentStatusChangedEvent.InputTuple,
    ContentStatusChangedEvent.OutputTuple,
    ContentStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "ContentUpdated"
  ): TypedContractEvent<
    ContentUpdatedEvent.InputTuple,
    ContentUpdatedEvent.OutputTuple,
    ContentUpdatedEvent.OutputObject
  >;

  filters: {
    "ContentRegistered(uint256,address,uint8)": TypedContractEvent<
      ContentRegisteredEvent.InputTuple,
      ContentRegisteredEvent.OutputTuple,
      ContentRegisteredEvent.OutputObject
    >;
    ContentRegistered: TypedContractEvent<
      ContentRegisteredEvent.InputTuple,
      ContentRegisteredEvent.OutputTuple,
      ContentRegisteredEvent.OutputObject
    >;

    "ContentStatusChanged(uint256,bool)": TypedContractEvent<
      ContentStatusChangedEvent.InputTuple,
      ContentStatusChangedEvent.OutputTuple,
      ContentStatusChangedEvent.OutputObject
    >;
    ContentStatusChanged: TypedContractEvent<
      ContentStatusChangedEvent.InputTuple,
      ContentStatusChangedEvent.OutputTuple,
      ContentStatusChangedEvent.OutputObject
    >;

    "ContentUpdated(uint256,string,string)": TypedContractEvent<
      ContentUpdatedEvent.InputTuple,
      ContentUpdatedEvent.OutputTuple,
      ContentUpdatedEvent.OutputObject
    >;
    ContentUpdated: TypedContractEvent<
      ContentUpdatedEvent.InputTuple,
      ContentUpdatedEvent.OutputTuple,
      ContentUpdatedEvent.OutputObject
    >;
  };
}
